rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isRoomCreator(roomData) {
      return roomData.createdBy == request.auth.uid;
    }
    
    function isRoomParticipant(roomData) {
      return roomData.participants.hasAny([request.auth.uid]);
    }
    
    function canAccessRoom(roomData) {
      return roomData.type == 'public' || 
             isRoomParticipant(roomData) || 
             isRoomCreator(roomData);
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['spotifyToken', 'spotifyTokenTimestamp']);
    }

    match /rooms/{roomId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && isRoomCreator(resource.data);
      
      // Modified update rule to allow participant changes and system messages
      allow update: if isSignedIn() && (
        isRoomCreator(resource.data) ||
        resource.data.type == 'public' ||
        (resource.data.type == 'private' && (
          isRoomParticipant(resource.data) ||
          resource.data.participants.size() < 2
        )) ||
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['participants', 'systemMessages'])) ||
        (request.resource.data.type == resource.data.type &&
         request.resource.data.createdBy == resource.data.createdBy)
      );
      
      match /pinnedMessages/{messageId} {
        allow read: if isSignedIn() && canAccessRoom(get(/databases/$(database)/documents/rooms/$(roomId)).data);
        allow write: if isSignedIn() && isRoomCreator(get(/databases/$(database)/documents/rooms/$(roomId)).data);
      }
      
      match /typing/{userId} {
        allow read: if isSignedIn() && 
          canAccessRoom(get(/databases/$(database)/documents/rooms/$(roomId)).data);
        allow write: if isSignedIn() && 
          request.auth.token.email == userId &&
          canAccessRoom(get(/databases/$(database)/documents/rooms/$(roomId)).data);
      }

      match /recording/{userId} {
        allow read: if isSignedIn() && 
          canAccessRoom(get(/databases/$(database)/documents/rooms/$(roomId)).data);
        allow write: if isSignedIn() && 
          request.auth.token.email == userId &&
          canAccessRoom(get(/databases/$(database)/documents/rooms/$(roomId)).data);
      }

      match /Messages/{messageId} {
        // Enhanced read permission for search functionality
        allow read, list: if isSignedIn() && 
          canAccessRoom(get(/databases/$(database)/documents/rooms/$(roomId)).data);
        
        // Allow querying with specific indexes for search
        allow list: if isSignedIn() && 
          canAccessRoom(get(/databases/$(database)/documents/rooms/$(roomId)).data) && (
            request.query.orderBy == 'createdAt' ||
            request.query.orderBy == 'type' ||
            request.query.orderBy == 'user' ||
            request.query.orderBy == 'text' ||
            request.query.orderBy == 'timestamp'
          );
        
        // Create permission
        allow create: if isSignedIn() && (
          canAccessRoom(get(/databases/$(database)/documents/rooms/$(roomId)).data) ||
          (request.resource.data.type == 'system' && 
           get(/databases/$(database)/documents/rooms/$(roomId)).data.type == 'public')
        );
        
        // Update permission for reactions and message modifications
        allow update: if isSignedIn() && (
          resource.data.user == request.auth.token.email ||
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions', 'pinned', 'pinnedAt', 'pinnedBy', 'deleted']) &&
           canAccessRoom(get(/databases/$(database)/documents/rooms/$(roomId)).data))
        );
        
        // Delete permission
        allow delete: if isSignedIn() && (
          resource.data.user == request.auth.token.email ||
          isRoomCreator(get(/databases/$(database)/documents/rooms/$(roomId)).data)
        );
      }
    }
  }
}